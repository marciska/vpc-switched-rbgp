%% generateGPdata.m
% *Summary:* Generates the data for the GP models
% 
% Detailed Explanation:
%   Generates the data based on the authors previous work, see:
%       M. Omainska, J. Yamauchi, T. Beckers, T. Hatanaka, S. Hirche, and
%       M. Fujita, “Gaussian process-based visual pursuit control with
%       unknown target motion learning in three dimensions,” SICE Journal
%       of Control, Measurement, and System Integration, vol. 14, no. 1,
%       pp. 116–127, 2021.
%   Data is generated by a prior "cold-run" simulation with just the
%   Visual Motion Observer. The data is then stored in .mat files to be
%   loaded in other scripts.
%
% -----------
%
% Editor:
%   OMAINSKA Marco - Doctoral Student, Cybernetics
%       <marcoomainska@g.ecc.u-tokyo.ac.jp>
% Property of: Fujita-Yamauchi Lab, The University of Tokyo, 2022
% Website: https://www.scl.ipc.i.u-tokyo.ac.jp

% ------------- BEGIN CODE -------------
% set(groot,'defaultAxesTickLabelInterpreter','latex');

%% common settings

% VMO Simulation Settings

% observer gain
Ke = 30*eye(6);

% focal length
lambda = 20;

% feature points
fp = [   0,  0,  0.5;
       0.5,  0,    0;
       0,    0, -0.5;
      -0.5,  0,    0];

% initial conditions
gco_init = mergepose(eye(3),[0 1 0]);
gwc_init = mergepose(eye(3),[0 -5 0]);
pwo_init = [-2 0 0];


% GP related settings

center = [0 0 0];
scale = 1;
% datatype = 'VF';
datatype = 'TJ';

% datapoints M = Mx*My
% Mx = 10;
% My = 10;
% M = Mx*My;
M = 30;

% noise standard deviation
sn0 = 1e-1;

% data range
% xbnd = [-2.2+center(1) 2.2+center(1)]./scale;
% ybnd = [-2.2+center(2) 2.2+center(2)]./scale;

% plot range
% xbndplot = [-2.5+center(1) 2.5+center(1)]./scale;
% ybndplot = [-2.5+center(2) 2.5+center(2)]./scale;
xbndplot = [-2.9+center(1) 2.9+center(1)]./scale;
ybndplot = [-2.9+center(2) 2.9+center(2)]./scale;
% xbndplot = [-3.3+center(1) 3.3+center(1)]./scale;
% ybndplot = [-3.3+center(2) 3.3+center(2)]./scale;


%% VF1: settings
v = 1;
epsilon = 0.5;

% simulate
tend = 20;
simout = sim('generateData');
[~,pwo] = splitpose(simout.gwo.signals.values);
pwo1 = pwo;

% VF: generate data
% [Vbmdata, ~, Zang, Xmdata, Ymdata] = generateVDPdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale);
% gdata = [reshape(Xmdata,Mx*My,1) reshape(Ymdata,Mx*My,1) zeros(Mx*My,1) [0 0 1].*reshape(Zang,Mx*My,1)];
% Vbdata = reshape(Vbmdata,Mx*My,6);

% TJ: generate data
gdata = check(simout.gwo.signals.values);
Vbdata = simout.Vbwo.signals.values;
% split datapoints wide afar
dt = simout.SimulationMetadata.ModelInfo.SolverInfo.FixedStepSize;
idx = ceil(linspace(7/dt,13.1/dt,M));


%% VF1: SE3-kernel
kernel = @SE3;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,2),'upperBound',[1*ones(6,1) 1.8*ones(6,1)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% VF1: SEARD-kernel
kernel = @SEARD;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,7),'upperBound',[1*ones(6,1) 10*ones(6,6)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')




%% VF2: settings
v = 0.5;
epsilon = 1;

% simulate
tend = 30;
simout = sim('generateData');
[~,pwo] = splitpose(simout.gwo.signals.values);
pwo2 = pwo;

% generate data
% [Vbmdata, ~, Zang, Xmdata, Ymdata] = generateVDPdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale);
% gdata = [reshape(Xmdata,Mx*My,1) reshape(Ymdata,Mx*My,1) zeros(Mx*My,1) [0 0 1].*reshape(Zang,Mx*My,1)];
% Vbdata = reshape(Vbmdata,Mx*My,6);

% TJ: generate data
gdata = check(simout.gwo.signals.values);
Vbdata = simout.Vbwo.signals.values;
% split datapoints wide afar
dt = simout.SimulationMetadata.ModelInfo.SolverInfo.FixedStepSize;
idx = ceil(linspace(6/dt,20/dt,M));


%% VF2: SE3-kernel
kernel = @SE3;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,2),'upperBound',[1*ones(6,1) 1.3*ones(6,1)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% VF2: SEARD-kernel
kernel = @SEARD;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,7),'upperBound',[1*ones(6,1) 10*ones(6,6)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% VF3: settings
v = 0.7;
epsilon = 0.3;

% simulate
tend = 30;
simout = sim('generateData');
[~,pwo] = splitpose(simout.gwo.signals.values);
pwo3 = pwo;

% generate data
% [Vbmdata, ~, Zang, Xmdata, Ymdata] = generateVDPdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale);
% gdata = [reshape(Xmdata,Mx*My,1) reshape(Ymdata,Mx*My,1) zeros(Mx*My,1) [0 0 1].*reshape(Zang,Mx*My,1)];
% Vbdata = reshape(Vbmdata,Mx*My,6);

% TJ: generate data
gdata = check(simout.gwo.signals.values);
Vbdata = simout.Vbwo.signals.values;
% split datapoints wide afar
dt = simout.SimulationMetadata.ModelInfo.SolverInfo.FixedStepSize;
idx = ceil(linspace(7/dt,15.7/dt,M));


%% VF2: SE3-kernel
kernel = @SE3;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,2),'upperBound',[1*ones(6,1) 1.3*ones(6,1)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% VF2: SEARD-kernel
kernel = @SEARD;

% generate GP models
[X,Y,hyp,sn] = learnRMGP(gdata,Vbdata,M,kernel,sn0,idx,'lowerBound',1e-3*ones(6,7),'upperBound',[1*ones(6,1) 10*ones(6,6)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
tiledlayout(1,1,'TileSpacing','Compact','Padding','Compact');
ax = nexttile;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon,v,center,scale,xbndplot,ybndplot,pwo)

% save GP data
meta = struct('type','Van-Der-Pol','epsilon',epsilon,'v',v,'center',center,'scale',scale,'fig',fig);
fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon),'.') 'v' erase(sprintf('%g',v),'.') '_' func2str(kernel) '_M' sprintf('%g',M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%% also learn GP model for no switching
kernel = @SEARD;
% M = Mx*My*2;
epsilon1 = 0.5; v1 = 1;
epsilon2 = 1.5; v2 = 0.5;
% epsilon2 = 1.0; v2 = 0.5;
% epsilon3 = 0.3; v3 = 0.7;

S1 = load(['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon1),'.') 'v' erase(sprintf('%g',v1),'.') '_' func2str(kernel) '_M' sprintf('%g',M) '.mat']);
S2 = load(['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon2),'.') 'v' erase(sprintf('%g',v2),'.') '_' func2str(kernel) '_M' sprintf('%g',M) '.mat']);
% S3 = load(['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon3),'.') 'v' erase(sprintf('%g',v3),'.') '_' func2str(kernel) '_M' sprintf('%g',M) '.mat']);

sn0 = S1.sn;
% X = [S1.X; S2.X; S3.X];
% Y = [S1.Y; S2.Y; S3.Y];
X = [S1.X; S2.X];
Y = [S1.Y; S2.Y];

[hyp, sn0] = optimize_hyp(X,Y,@SEARD,'sn0',sn0,'lowerBound',1e-3*ones(6,7),'upperBound',[1*ones(6,1) 10*ones(6,6)],'fixedNoise',true);

% plot
fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
ax = gca;
% ax = subplot(1,2,1);
plotVF(ax,X,epsilon1,v1,center,scale,xbndplot,ybndplot,pwo1)
% ax = subplot(1,2,2);
plotVF(ax,X,epsilon2,v2,center,scale,xbndplot,ybndplot,pwo2)
% ax = subplot(1,2,3);
% plotVF(ax,X,epsilon3,v3,center,scale,xbndplot,ybndplot,pwo3)

% save GP data
% meta = struct('type','2 Van-Der-Pols','fig',fig);
% fname = ['data/GP/' datatype '_vdp_eps' erase(sprintf('%g',epsilon1),'.') 'v' erase(sprintf('%g',v1),'.') '_eps' erase(sprintf('%g',epsilon2),'.') 'v' erase(sprintf('%g',v2),'.') '_' func2str(kernel) '_M' sprintf('%g',2*M)];
% save(fname,'X','Y','hyp','sn','kernel','meta')


%%

fig = figure('Name','Velocity Field','NumberTitle','off',...
    'Units','normalized','Position',[.1 .2 .4 .5]);
ax = gca;
plotVF(ax,X,epsilon1,v1,center,scale,[-3.5 3.5],[-3.5 3.5],pwo1)
% plotVF(ax,X,epsilon2,v2,center,scale,[-3.5 3.5],[-3.5 3.5],pwo2)


%% Local functions

function [Vbm, Znorm, Zang, Xm, Ym] = generateVDPdata(xbnd,ybnd,Mx,My,epsilon,v,center,scale)
    % calc meshgrid
    xm = linspace(xbnd(1),xbnd(2),Mx);
    ym = linspace(ybnd(2),ybnd(1),My);
    
    
    % eval VF on grid
    Vbm = zeros(My,Mx,6);
    for i = 1:numel(ym)
        for j = 1:numel(xm)
            Vbm(i,j,:) = vanderpol([xm(j) ym(i) 0],v,epsilon,center,scale);
        end
    end
    Znorm = sqrt(Vbm(:,:,1).^2 + Vbm(:,:,2).^2);
    Zang = wrapToPi(atan2(Vbm(:,:,2),Vbm(:,:,1)) - pi/2);
    [Xm,Ym] = meshgrid(xm,ym);
end

function plotVF(ax,X,epsilon,v,center,scale,xbnd,ybnd,pwo)
%     arrowcolor = [65/255 114/255 160/255];
    arrowcolor = ones(1,3)*0;
%     trajcolor = '#f4a261';
    trajcolor  = ones(1,3)*0.6;
%     datacolor = '#e63946';
    datacolor  = ones(1,3)*0.25;
%     mapcolor = [1 1 1; ...
%                  241/255 246/255 249/255; ...
%                  221/255 232/255 238/255; ...
%                   93/255 143/255 180/255];
    mapcolor   = [ones(1,3)*1; ...
                  ones(1,3)*0.975; ...
                  ones(1,3)*0.95; ...
                  ones(1,3)*0.85];

    % calculate quiver
    [Vbm, Znorm, ~, Xm, Ym] = generateVDPdata(xbnd,ybnd,20,20,epsilon,v,center,scale);
    xm = Xm(1,:);
    ym = Ym(:,1)';

    % plot
    hold(ax,'on');
    contourf(ax,xm,ym,Znorm,[0 0.9 1.7 3.2],'LineStyle','none');
    colormap(ax,mapcolor);
    quiver(ax,xm,ym,Vbm(:,:,1),Vbm(:,:,2),1.2,'LineWidth',3,'Color',arrowcolor);
    plot(ax,pwo(:,1),pwo(:,2),'Color',trajcolor,'LineWidth',10);
    xlabel(ax,'x [m]', 'interpreter', 'latex')
    ylabel(ax,'y [m]', 'interpreter', 'latex')
    axis(ax,'equal','tight')
    xlim(ax,xbnd);
    ylim(ax,ybnd);
    plot(ax,X(:,1),X(:,2),'+','Color',datacolor,'LineWidth',5,'MarkerSize',30);
    grid(ax,'off');
    ax.FontSize = 35;
end
